(use 'riemann.hipchat)
(require '[riemann.common :refer [event]])

(let [host "0.0.0.0"]
  (tcp-server :host host)
  (udp-server :host host))

(def librato (librato-metrics librato-email librato-key))

(def hipchat-token)
(def hipchat-room)
(def hc (hipchat {:token hipchat-token
                  :room hipchat-room
                  :from "Bernhard R."
                  :notify 0}))

(periodically-expire 10 {:keep-keys [:host :service :tags]})

(def one-day (* 24 60 60))

(let [the-index (index)
      index (update-index the-index)]
  (streams
   (where (service #"^deploy.*")
          (changed-state
           hc
           (where (state "started")
                  (librato :start-annotation)
                  (else
                   (librato :end-annotation)))))
   (where (tagged-any ["turbovote" "usps-processor" "sendgrid-monitor"])
          (where (or (service "voter-created") (service "voter-completed"))
                 (moving-time-window one-day
                                     (smap (fn [events]
                                             (let [num-created (count (filter #(= "voter-created" (:service %)) events))
                                                   num-completed (count (filter #(= "voter-completed" (:service %)) events))
                                                   fraction (if (zero? num-created) 0
                                                                (/ num-completed num-created))]
                                               (event {:service "voter signup completion rate"
                                                       :metric fraction
                                                       :tags ["turbovote"]})))
                                           (librato :gauge))))
          (where (or (service "sendgrid-delivered") (service "sendgrid-open"))
                 (moving-time-window one-day
                                     (smap (fn [events]
                                             (let [num-delivered (count (filter #(= "sendgrid-delivered" (:service %)) events))
                                                   num-open (count (filter #(= "sendgrid-open" (:service %)) events))
                                                   fraction (if (zero? num-delivered) 0
                                                                (/ num-open num-delivered))]
                                               (event {:service "email open rate"
                                                       :metric fraction
                                                       :tags ["turbovote"]})))
                                           (librato :gauge))))
          (where (service #"^geocode-.*")
                 (moving-time-window one-day
                                     (smap (fn [events]
                                             (let [successful (count (filter #(= "geocode-success" (:service %)) events))
                                                   failed (count (filter #(#{"geocode-failure" "geocode-internal-failure"} (:service %)) events))
                                                   total (+ successful failed)
                                                   fraction (if (zero? total) 0
                                                                (/ successful total))]
                                               (event {:service "geocode success rate"
                                                       :metric fraction
                                                       :tags ["turbovote"]})))
                                           (librato :gauge))))
          (librato :gauge))
   (where (tagged "monitor")
          index
          (librato :gauge)
          (changed-state hc))))
