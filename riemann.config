(use 'riemann.hipchat)

(let [host "0.0.0.0"]
  (udp-server :host host))

(def librato (librato-metrics librato-email librato-key))

(def hipchat-token)
(def hipchat-room)
(def hc (hipchat {:token hipchat-token
                  :room hipchat-room
                  :from "Bernhard R."
                  :notify 0}))

(streams
 (where (service #"^deploy.*")
        (changed-state
         (where (state "started")
                hc
                (librato :start-annotation)
                (else
                 hc
                 (librato :end-annotation)))))
 (where (tagged-any ["turbovote" "usps-processor"])
        (where (or (service "voter-created") (service "voter-completed"))
               (moving-time-window 3600
                                   (smap (fn [events]
                                           (let [num-created (count (filter #(= "voter-created" (:service %)) events))
                                                 num-completed (count (filter #(= "voter-completed" (:service %)) events))
                                                 fraction (if (zero? num-created) 0
                                                              (/ num-completed num-created))]
                                             {:service "voter signup completion rate"
                                              :metric fraction
                                              :tags ["turbovote"]})))))
        (librato :gauge)))
